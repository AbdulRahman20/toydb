# Architecture notes

This documents describes what features will be implemented and how it's going
to be done.

## Database features

**Datatypes:**

* Integer, `int` (represented as signed 32-bit integer)
* Double, `double` (represented as 64-bit floating-point number)
* Fixed-size string, `varchar(n)` (represented as an array of 8-bit characters
  padded with zeroes up to length of `n` chars)

**Commands:**

* Create and drop table
* Select from table (both simple and joined)
* Insert, update and delete
* Create and drop index
* Vacuum

Complete command language grammar can be found in `doc/grammar.ebnf` file.

**Limits:**

* Maximum length of column definition string in `CREATE TABLE` command is **1024** characters
* Maximum length of columns list in `CREATE INDEX` command is **1024** characters
* Maximum length of table or index name is **64** characters
* Maximum number for `varchar` type argument is `2^20`

## API features

TBD.

DBMS will be implemented as a Haskell library. An example console REPL will use
this library to interact with database.

Here is a piece of client-side pseudo-code. Something similar should be
accomplished.

```haskell
withDatabase :: FileName -> (Some DB Monad with IO ?) -> IO ()
withDatabase "file.db" $ do
    -- `execute` returns `Either String Integer` where Integer stays
    -- for "rows affected", e.g. inserted, updated, removed
    Right _ <- execute "create table test (id int, str varchar(128));"
    Right 1 <- execute "insert into test values (10, \"something\");"
    Right 1 <- execute "insert into test values (42, \"something else\");"
    Right 1 <- execute "insert into test values (500, \"yet another one\");"
    -- `executeWithCallback` performs the same as execute, except that
    -- it takes additional argument, that is, callback. Callback has
    -- type `SqlRow -> IO Boolean` (or something similar) and
    -- returns `false` if current DB operation should be interrupted
    -- or `true` if it should be continued. Applicable for
    -- SELECT statements only, others ignore callback
    result  <- executeWithCallback "select * from test;" $ \row ->
        if (row !! 0) == ValueInt 42
            then $ return false
            else $ do
                putStrLn (row !! 1)
                return true
    case result of
        Left error -> putStrLn error
        Right _ -> return ()
```

## Internal design

### File format, pages and payload types

The whole database is contained in one file. This file has the following structure:

```
+----------+
| Metadata |
+----------+
| Page 0   |
+----------+
| ...      |
+----------+
| Page X   |
+----------+
```

**Metadata** block contains internal data necessary for DBMS to operate with database:

- `fileSpecVersion :: Word8`    – File structure spec version
- `pageSize :: Word16`          – Page size in bytes
- `pagesNumber :: Word32`       – Number of pages in database
- `firstEmptyPageId :: PageId`  – ID of the first empty page
- `tablesMetaPageId :: PageId`  – ID of the first page of `tables_meta` table
- `indexesMetaPageId :: PageId` – ID of the first page of `indexes_meta` table

Metadata block has fixed size of **128** bytes. `PageId` is `Word32` with `0xFFFFFFFF` value reserved to signal that there is no ID.

**Page** is a piece of data stored in database. Pages form a linked list. Each page has fixed size of `pageSize` bytes. It contains the following items:

- `pageId :: PageId` – ID of the current page
- `nextId :: PageId` – ID of the next page in chain
- `payload :: ?` – Binary payload

There are different possible payloads depending on what purpose page serves:

- *Table page* – contains rows of certain table
- *Index interior page* – contains array of IDs to children pages for each value of index key
- *Index leaf page* – contains array of IDs to table pages for each value of index key
- *Empty page* – contains nothing. Some time ago it belonged to one of the types above, but its payload was cleared by a sequence of `DROP INDEX` or `DROP TABLE` or `DELETE` commands.

### Metadata tables

There are two metadata tables in database: `tables_meta` and `indexes_meta`. They contain information about tables and indexes in database. The structure of `tables_meta` is the following:

| id  | name        | col_spec      | start\_page_id |
| --- | ----------- | ------------- | -------------- |
| int | varchar(64) | varchar(1024) | int            |

`col_spec` is exatcly the same string that was being used in `CREATE TABLE` command to define columns of particular table. `start_page_id` is ID of the first table page of a table.

The structure of `indexes_meta` is the following:

| id  | name        | table_id | key_spec      | start\_page_id |
| --- | ----------- | -------- | ------------- | -------------- |
| int | varchar(64) | int      | varchar(1024) | int            |

`table_id` is identificator of the table on which index is created in `tables_meta` table. `key_spec` is exactly the same string that was being used in `CREATE INDEX` command to enumerate columns used in index. `start_page_id` is ID of the first index page of an index.


### Query compiler (Parser + Optimizer)

Possible optimizations:

- Optimize logic expressions
- Remove duplicate joins and expressions
- What else?

### Executor (VM Interpreter)

TBD.

### Pager

TBD.

## Literature

Overall:

- http://coding-geek.com/how-databases-work/
- http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf

Storing data:

- http://blog.jcole.us/2013/01/07/the-physical-structure-of-innodb-index-pages/
- http://blog.jcole.us/2013/01/10/btree-index-structures-in-innodb/
- https://sqlite.org/fileformat2.html

Compilation and execution of a query:

- https://sqlite.org/vdbe.html
- https://sqlite.org/opcode.html
- https://sqlite.org/optoverview.html
